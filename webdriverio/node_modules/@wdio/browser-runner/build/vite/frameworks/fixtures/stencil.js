import { h } from '@stencil/core';
process.nextTick = (cb) => setTimeout(cb, 0);
// @ts-expect-error
window.React = {
    createElement: h,
};
import { bootstrapLazy, flushAll, insertVdomAnnotations, registerComponents, registerModule, renderVdom, setSupportsShadowDom, startAutoApplyChanges, styles, win, writeTask,
// @ts-expect-error
 } from '@stencil/core/internal/testing/index.js';
/**
 * Creates a new spec page for unit testing
 * @param opts the options to apply to the spec page that influence its configuration and operation
 * @returns the created spec page
 */
export function render(opts) {
    if (!opts) {
        throw new Error('NewSpecPageOptions required');
    }
    const stencilStage = document.querySelector('stencil-stage');
    if (stencilStage) {
        stencilStage.remove();
    }
    const stage = document.createElement('stencil-stage');
    document.body.appendChild(stage);
    if (Array.isArray(opts.components)) {
        registerComponents(opts.components);
    }
    if (opts.hydrateClientSide) {
        opts.includeAnnotations = true;
    }
    if (opts.hydrateServerSide) {
        opts.includeAnnotations = true;
        setSupportsShadowDom(false);
    }
    else {
        opts.includeAnnotations = !!opts.includeAnnotations;
        if (opts.supportsShadowDom === false) {
            setSupportsShadowDom(false);
        }
        else {
            setSupportsShadowDom(true);
        }
    }
    const cmpTags = new Set();
    const doc = win.document;
    const page = {
        win: win,
        doc: doc,
        body: stage,
        styles: styles
    };
    const lazyBundles = opts.components.map((Cstr) => {
        // eslint-disable-next-line eqeqeq
        if (Cstr.COMPILER_META == null) {
            throw new Error('Invalid component class: Missing static "COMPILER_META" property.');
        }
        cmpTags.add(Cstr.COMPILER_META.tagName);
        Cstr.isProxied = false;
        proxyComponentLifeCycles(Cstr);
        const bundleId = `${Cstr.COMPILER_META.tagName}.${Math.round(Math.random() * 899999) + 100000}`;
        const stylesMeta = Cstr.COMPILER_META.styles;
        if (Array.isArray(stylesMeta)) {
            if (stylesMeta.length > 1) {
                const styles = {};
                stylesMeta.forEach((style) => {
                    styles[style.modeName] = style.styleStr;
                });
                Cstr.style = styles;
            }
            else if (stylesMeta.length === 1) {
                Cstr.style = stylesMeta[0].styleStr;
            }
        }
        registerModule(bundleId, Cstr);
        const lazyBundleRuntimeMeta = formatLazyBundleRuntimeMeta(bundleId, [Cstr.COMPILER_META]);
        return lazyBundleRuntimeMeta;
    });
    if (typeof opts.direction === 'string') {
        page.doc.documentElement.setAttribute('dir', opts.direction);
    }
    if (typeof opts.language === 'string') {
        page.doc.documentElement.setAttribute('lang', opts.language);
    }
    bootstrapLazy(lazyBundles);
    if (typeof opts.template === 'function') {
        const cmpMeta = {
            $flags$: 0,
            $tagName$: 'body',
        };
        const ref = {
            $ancestorComponent$: undefined,
            $flags$: 0,
            $modeName$: undefined,
            $cmpMeta$: cmpMeta,
            $hostElement$: page.body,
        };
        renderVdom(ref, opts.template());
    }
    let rootComponent = null;
    Object.defineProperty(page, 'root', {
        get() {
            if (!rootComponent) {
                rootComponent = findRootComponent(cmpTags, page.body);
            }
            if (rootComponent) {
                return rootComponent;
            }
            const firstElementChild = page.body.firstElementChild;
            if (!firstElementChild) {
                return firstElementChild;
            }
            return null;
        },
    });
    if (opts.hydrateServerSide) {
        insertVdomAnnotations(doc, []);
    }
    if (opts.autoApplyChanges) {
        startAutoApplyChanges();
    }
    flushAll();
    return { flushAll };
}
/**
 * A helper method that proxies Stencil lifecycle methods by mutating the provided component class
 * @param Cstr the component class whose lifecycle methods will be proxied
 */
function proxyComponentLifeCycles(Cstr) {
    // we may have called this function on the class before, reset the state of the class
    if (typeof Cstr.prototype?.__componentWillLoad === 'function') {
        Cstr.prototype.componentWillLoad = Cstr.prototype.__componentWillLoad;
        Cstr.prototype.__componentWillLoad = null;
    }
    if (typeof Cstr.prototype?.__componentWillUpdate === 'function') {
        Cstr.prototype.componentWillUpdate = Cstr.prototype.__componentWillUpdate;
        Cstr.prototype.__componentWillUpdate = null;
    }
    if (typeof Cstr.prototype?.__componentWillRender === 'function') {
        Cstr.prototype.componentWillRender = Cstr.prototype.__componentWillRender;
        Cstr.prototype.__componentWillRender = null;
    }
    // the class should be in a known 'good' state to proxy functions
    if (typeof Cstr.prototype?.componentWillLoad === 'function') {
        Cstr.prototype.__componentWillLoad = Cstr.prototype.componentWillLoad;
        Cstr.prototype.componentWillLoad = function () {
            // @ts-expect-error
            const result = this.__componentWillLoad();
            if (result && typeof result.then === 'function') {
                writeTask(() => result);
            }
            else {
                writeTask(() => Promise.resolve());
            }
            return result;
        };
    }
    if (typeof Cstr.prototype?.componentWillUpdate === 'function') {
        Cstr.prototype.__componentWillUpdate = Cstr.prototype.componentWillUpdate;
        Cstr.prototype.componentWillUpdate = function () {
            // @ts-expect-error
            const result = this.__componentWillUpdate();
            if (result && typeof result.then === 'function') {
                writeTask(() => result);
            }
            else {
                writeTask(() => Promise.resolve());
            }
            return result;
        };
    }
    if (typeof Cstr.prototype?.componentWillRender === 'function') {
        Cstr.prototype.__componentWillRender = Cstr.prototype.componentWillRender;
        Cstr.prototype.componentWillRender = function () {
            // @ts-expect-error
            const result = this.__componentWillRender();
            if (result && typeof result.then === 'function') {
                writeTask(() => result);
            }
            else {
                writeTask(() => Promise.resolve());
            }
            return result;
        };
    }
}
/**
 * Return the first Element whose {@link Element#nodeName} property matches a tag found in the provided `cmpTags`
 * argument.
 *
 * If the `nodeName` property on the element matches any of the names found in the provided `cmpTags` argument, that
 * element is returned. If no match is found on the current element, the children will be inspected in a depth-first
 * search manner. This process continues until either:
 * - an element is found (and execution ends)
 * - no element is found after an exhaustive search
 *
 * @param cmpTags component tag names to use in the match criteria
 * @param node the node whose children are to be inspected
 * @returns An element whose name matches one of the strings in the provided `cmpTags`. If no match is found, `null` is
 * returned
 */
function findRootComponent(cmpTags, node) {
    if (node) {
        const children = node.children;
        const childrenLength = children.length;
        for (let i = 0; i < childrenLength; i++) {
            const elm = children[i];
            if (cmpTags.has(elm.nodeName.toLowerCase())) {
                return elm;
            }
        }
        for (let i = 0; i < childrenLength; i++) {
            const r = findRootComponent(cmpTags, children[i]);
            if (r) {
                return r;
            }
        }
    }
    return null;
}
const formatLazyBundleRuntimeMeta = (bundleId, cmps) => {
    return [bundleId, cmps.map((cmp) => formatComponentRuntimeMeta(cmp, true))];
};
/**
 * Transform metadata about a component from the compiler to a compact form for
 * use at runtime.
 *
 * @param compilerMeta component metadata gathered during compilation
 * @param includeMethods include methods in the component's members or not
 * @returns a compact format for component metadata, intended for runtime use
 */
export const formatComponentRuntimeMeta = (compilerMeta, includeMethods) => {
    let flags = 0;
    if (compilerMeta.encapsulation === 'shadow') {
        flags |= 1 /* CMP_FLAGS.shadowDomEncapsulation */;
        if (compilerMeta.shadowDelegatesFocus) {
            flags |= 16 /* CMP_FLAGS.shadowDelegatesFocus */;
        }
    }
    else if (compilerMeta.encapsulation === 'scoped') {
        flags |= 2 /* CMP_FLAGS.scopedCssEncapsulation */;
    }
    if (compilerMeta.encapsulation !== 'shadow' && compilerMeta.htmlTagNames.includes('slot')) {
        flags |= 4 /* CMP_FLAGS.hasSlotRelocation */;
    }
    if (compilerMeta.hasMode) {
        flags |= 32 /* CMP_FLAGS.hasMode */;
    }
    const members = formatComponentRuntimeMembers(compilerMeta, includeMethods);
    const hostListeners = formatHostListeners(compilerMeta);
    return trimFalsy([
        flags,
        compilerMeta.tagName,
        Object.keys(members).length > 0 ? members : undefined,
        hostListeners.length > 0 ? hostListeners : undefined,
    ]);
};
const formatComponentRuntimeMembers = (compilerMeta, includeMethods = true) => {
    return {
        ...formatPropertiesRuntimeMember(compilerMeta.properties),
        ...formatStatesRuntimeMember(compilerMeta.states),
        ...(includeMethods ? formatMethodsRuntimeMember(compilerMeta.methods) : {}),
    };
};
const formatPropertiesRuntimeMember = (properties) => {
    const runtimeMembers = {};
    properties.forEach((member) => {
        runtimeMembers[member.name] = trimFalsy([
            /**
             * [0] member type
             */
            formatFlags(member),
            formatAttrName(member),
        ]);
    });
    return runtimeMembers;
};
const formatFlags = (compilerProperty) => {
    let type = formatPropType(compilerProperty.type);
    if (compilerProperty.mutable) {
        type |= 1024 /* MEMBER_FLAGS.Mutable */;
    }
    if (compilerProperty.reflect) {
        type |= 512 /* MEMBER_FLAGS.ReflectAttr */;
    }
    return type;
};
const formatAttrName = (compilerProperty) => {
    if (typeof compilerProperty.attribute === 'string') {
        // string attr name means we should observe this attribute
        if (compilerProperty.name === compilerProperty.attribute) {
            // property name and attribute name are the exact same
            // true value means to use the property name for the attribute name
            return undefined;
        }
        // property name and attribute name are not the same
        // so we need to return the actual string value
        // example: "multiWord" !== "multi-word"
        return compilerProperty.attribute;
    }
    // we shouldn't even observe an attribute for this property
    return undefined;
};
const formatPropType = (type) => {
    if (type === 'string') {
        return 1 /* MEMBER_FLAGS.String */;
    }
    if (type === 'number') {
        return 2 /* MEMBER_FLAGS.Number */;
    }
    if (type === 'boolean') {
        return 4 /* MEMBER_FLAGS.Boolean */;
    }
    if (type === 'any') {
        return 8 /* MEMBER_FLAGS.Any */;
    }
    return 16 /* MEMBER_FLAGS.Unknown */;
};
const formatStatesRuntimeMember = (states) => {
    const runtimeMembers = {};
    states.forEach((member) => {
        runtimeMembers[member.name] = [
            32 /* MEMBER_FLAGS.State */,
        ];
    });
    return runtimeMembers;
};
const formatMethodsRuntimeMember = (methods) => {
    const runtimeMembers = {};
    methods.forEach((member) => {
        runtimeMembers[member.name] = [
            64 /* MEMBER_FLAGS.Method */,
        ];
    });
    return runtimeMembers;
};
const formatHostListeners = (compilerMeta) => {
    return compilerMeta.listeners.map((compilerListener) => {
        const hostListener = [
            computeListenerFlags(compilerListener),
            compilerListener.name,
            compilerListener.method,
        ];
        return hostListener;
    });
};
const computeListenerFlags = (listener) => {
    let flags = 0;
    if (listener.capture) {
        flags |= 2 /* LISTENER_FLAGS.Capture */;
    }
    if (listener.passive) {
        flags |= 1 /* LISTENER_FLAGS.Passive */;
    }
    switch (listener.target) {
        case 'document':
            flags |= 4 /* LISTENER_FLAGS.TargetDocument */;
            break;
        case 'window':
            flags |= 8 /* LISTENER_FLAGS.TargetWindow */;
            break;
        case 'body':
            flags |= 16 /* LISTENER_FLAGS.TargetBody */;
            break;
        case 'parent':
            flags |= 32 /* LISTENER_FLAGS.TargetParent */;
            break;
    }
    return flags;
};
const trimFalsy = (data) => {
    const arr = data;
    for (let i = arr.length - 1; i >= 0; i--) {
        if (arr[i]) {
            break;
        }
        // if falsy, safe to pop()
        arr.pop();
    }
    return arr;
};
