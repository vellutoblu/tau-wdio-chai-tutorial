{
  "version": 3,
  "sources": ["../../rgb2hex/index.js"],
  "sourcesContent": ["/**\n * rgb2hex\n *\n * @author Christian Bromann <mail@christian-bromann.com>\n * @description converts rgba color to HEX\n *\n * @param  {String} color  rgb or rgba color\n * @return {Object}        object with hex and alpha value\n */\n\nvar rgb2hex = module.exports = function rgb2hex(color) {\n    if(typeof color !== 'string') {\n        // throw error of input isn't typeof string\n        throw new Error('color has to be type of `string`');\n    } else if (color.substr(0, 1) === '#') {\n        // or return if already rgb color\n        return {\n            hex: color,\n            alpha: 1\n        };\n    }\n\n    /**\n     * strip spaces\n     */\n    var strippedColor = color.replace(/\\s+/g,'');\n\n    /**\n     * parse input\n     */\n    var digits = /(.*?)rgb(a)??\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})(,([01]|0??\\.([0-9]{0,})))??\\)/.exec(strippedColor);\n\n    if(!digits) {\n        // or throw error if input isn't a valid rgb(a) color\n        throw new Error('given color (' + color + ') isn\\'t a valid rgb or rgba color');\n    }\n\n    var red = parseInt(digits[3], 10);\n    var green = parseInt(digits[4], 10);\n    var blue = parseInt(digits[5], 10);\n    var alpha = digits[6] ? /([0-9\\.]+)/.exec(digits[6])[0] : '1';\n    var rgb = ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1);\n\n    // parse alpha value into float\n    if(alpha.substr(0,1) === '.') {\n        alpha = parseFloat('0' + alpha);\n    }\n\n    // cut alpha value after 2 digits after comma\n    alpha = parseFloat(Math.round(alpha * 100)) / 100;\n\n    return {\n        hex: '#' + rgb.toString(16),\n        alpha: alpha\n    };\n};"],
  "mappings": ";;;;;AAAA;AAAA;AAUA,QAAI,UAAU,OAAO,UAAU,SAASA,SAAQ,OAAO;AACnD,UAAG,OAAO,UAAU,UAAU;AAE1B,cAAM,IAAI,MAAM,kCAAkC;AAAA,MACtD,WAAW,MAAM,OAAO,GAAG,CAAC,MAAM,KAAK;AAEnC,eAAO;AAAA,UACH,KAAK;AAAA,UACL,OAAO;AAAA,QACX;AAAA,MACJ;AAKA,UAAI,gBAAgB,MAAM,QAAQ,QAAO,EAAE;AAK3C,UAAI,SAAS,6EAA6E,KAAK,aAAa;AAE5G,UAAG,CAAC,QAAQ;AAER,cAAM,IAAI,MAAM,kBAAkB,QAAQ,mCAAoC;AAAA,MAClF;AAEA,UAAI,MAAM,SAAS,OAAO,CAAC,GAAG,EAAE;AAChC,UAAI,QAAQ,SAAS,OAAO,CAAC,GAAG,EAAE;AAClC,UAAI,OAAO,SAAS,OAAO,CAAC,GAAG,EAAE;AACjC,UAAI,QAAQ,OAAO,CAAC,IAAI,aAAa,KAAK,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI;AAC1D,UAAI,OAAQ,OAAO,SAAS,IAAI,OAAO,KAAM,KAAK,IAAI,SAAS,EAAE,EAAE,MAAM,CAAC;AAG1E,UAAG,MAAM,OAAO,GAAE,CAAC,MAAM,KAAK;AAC1B,gBAAQ,WAAW,MAAM,KAAK;AAAA,MAClC;AAGA,cAAQ,WAAW,KAAK,MAAM,QAAQ,GAAG,CAAC,IAAI;AAE9C,aAAO;AAAA,QACH,KAAK,MAAM,IAAI,SAAS,EAAE;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;",
  "names": ["rgb2hex"]
}
